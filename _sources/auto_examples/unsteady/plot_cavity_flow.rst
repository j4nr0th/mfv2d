
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/unsteady/plot_cavity_flow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_unsteady_plot_cavity_flow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_unsteady_plot_cavity_flow.py:


Navier-Stokes: Cavity Flow
==========================

Cavity flow can be considered a canonical solution for the Navier-Stokes,
given how well the solution to this problem is known. In this exampled it
is solved for the case of :math:`Re = 10`, since that allows for quick convergence
on a fairly coarse grid.

.. GENERATED FROM PYTHON SOURCE LINES 10-26

.. code-block:: Python


    import numpy as np
    import pyvista as pv
    import rmsh
    from mfv2d import (
        BoundaryCondition2DSteady,
        KFormSystem,
        KFormUnknown,
        SolverSettings,
        SystemSettings,
        TimeSettings,
        UnknownFormOrder,
        mesh_create,
        solve_system_2d,
    )








.. GENERATED FROM PYTHON SOURCE LINES 27-34

Setup
-----

Since there's no manufactured solution, the only necessary setup
is the boundary velocity, which should be 2 on the top side of the
mesh and zero elsewhere. The reason for it being 2 is because the
domain length is also 2.

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: Python


    RE = 1e1


    def boundary_velocty(x, y):
        """Exact velocity solution."""
        vx = 2 * (y == 1) + 0 * x
        vy = 0 * (x + y)
        return np.stack((vx, vy), axis=-1)









.. GENERATED FROM PYTHON SOURCE LINES 47-54

System Setup
------------

System is set up the same as with the steady example of Navier-Stokes,
with the only difference being the weak pressure boundary conditions
not being included, due to the fact that the strong boundary conditions
on the normal velocity mean that they would not be used either way.

.. GENERATED FROM PYTHON SOURCE LINES 54-115

.. code-block:: Python


    pre = KFormUnknown("pre", UnknownFormOrder.FORM_ORDER_2)
    w_pre = pre.weight
    vel = KFormUnknown("vel", UnknownFormOrder.FORM_ORDER_1)
    w_vel = vel.weight
    vor = KFormUnknown("vor", UnknownFormOrder.FORM_ORDER_0)
    w_vor = vor.weight

    system = KFormSystem(
        w_vor.derivative * vel - w_vor * vor == w_vor ^ boundary_velocty,
        # No weak BC for pressure, since normal velocity is given
        (1 / RE) * (w_vel * vor.derivative) + w_vel.derivative * pre
        == -(w_vel * (vel ^ (~vor))),
        w_pre * vel.derivative == 0,
        sorting=lambda f: f.order,
    )
    print(system)

    N = 6
    P = 3

    n1 = N
    n2 = N

    rect_mesh, rx, ry = rmsh.create_elliptical_mesh(
        rmsh.MeshBlock(
            label=None,
            bottom=rmsh.BoundaryCurve.from_knots(n1, (-1, -1), (+1, -1)),
            right=rmsh.BoundaryCurve.from_knots(n2, (+1, -1), (+1, +1)),
            top=rmsh.BoundaryCurve.from_knots(n1, (+1, +1), (-1, +1)),
            left=rmsh.BoundaryCurve.from_knots(n2, (-1, +1), (-1, -1)),
        )
    )
    assert rx < 1e-6, ry < 1e-6

    mesh = mesh_create(
        P,
        np.stack((rect_mesh.pos_x, rect_mesh.pos_y), axis=-1),
        rect_mesh.lines + 1,
        rect_mesh.surfaces,
    )

    solutions, stats, mesh = solve_system_2d(
        mesh,
        SystemSettings(
            system,
            [BoundaryCondition2DSteady(vel, mesh.boundary_indices, boundary_velocty)],
            [(0.0, pre)],
        ),
        solver_settings=SolverSettings(
            maximum_iterations=100,
            absolute_tolerance=1e-10,
            relative_tolerance=0,
        ),
        time_settings=TimeSettings(dt=5, nt=20, time_march_relations={w_vel: vel}),
        print_residual=False,
        recon_order=25,
    )
    print(stats)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [vor(0*)]^T  ([           -1 * M(0) | (E(1, 0))^T @ M(0) |                  0]  [vor(0)]   [<vor, boundary_velocty>])   [vor(0*)]^T  ([                              0 |                        0 | 0]  [vor(0)] 
    [vel(1*)]    ([0.1 * M(1) @ E(1, 0) |                  0 | (E(2, 1))^T @ M(1)]  [vel(1)] = [                       ]) + [vel(1*)]    ([-1 * M(1) @ M(1, 2; vel) @ M(1) | -1 * M(1) @ N(1, 2; vor) | 0]  [vel(1)] 
    [pre(2*)]    ([                   0 |     M(2) @ E(2, 1) |                  0]  [pre(2)]   [                      0])   [pre(2*)]    ([                              0 |                        0 | 0]  [pre(2)] 
    SolutionStatistics(element_orders={(3, 3): 25}, n_total_dofs=1550, n_leaf_dofs=np.uint64(1225), n_lagrange=325, n_elems=25, n_leaves=25, iter_history=array([20, 24, 20, 22, 20, 21, 20, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20,
           20, 20, 20], dtype=uint32), residual_history=array([4.73040218e-11, 3.78859860e-11, 4.94556202e-11, 4.77373419e-11,
           6.63145788e-11, 4.92627328e-11, 6.85677765e-11, 4.04782319e-11,
           7.24523080e-11, 9.98627847e-11, 7.65691122e-11, 9.79617637e-11,
           7.69061897e-11, 9.11821313e-11, 7.17330223e-11, 8.28753177e-11,
           7.86609111e-11, 9.14862630e-11, 8.53559723e-11, 9.54867019e-11]))




.. GENERATED FROM PYTHON SOURCE LINES 116-121

Plot Streamlines
----------------

Pyvista allows for very simple 2D streamline plots.


.. GENERATED FROM PYTHON SOURCE LINES 122-143

.. code-block:: Python


    plotter = pv.Plotter(off_screen=True, shape=(1, 1), window_size=(1600, 800))

    solution = solutions[-1]
    solution.point_data[vel.label] = np.pad(solution.point_data[vel.label], ((0, 0), (0, 1)))
    plotter.add_mesh(solution.copy(), scalars=vor.label, clim=(-5, +5))
    plotter.add_mesh(solution.extract_all_edges(), color="black")
    plotter.add_mesh(
        solution.streamlines_evenly_spaced_2D(
            vectors=vel.label,
            step_length=0.3,
            start_position=(0, 0, 0),
            separating_distance=0.2,
            separating_distance_ratio=0.1,
            compute_vorticity=False,
        ),
        scalars=None,
        show_scalar_bar=False,
        color="white",
    )
    plotter.view_xy()



.. image-sg:: /auto_examples/unsteady/images/sphx_glr_plot_cavity_flow_001.png
   :alt: plot cavity flow
   :srcset: /auto_examples/unsteady/images/sphx_glr_plot_cavity_flow_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.587 seconds)


.. _sphx_glr_download_auto_examples_unsteady_plot_cavity_flow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_cavity_flow.ipynb <plot_cavity_flow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_cavity_flow.py <plot_cavity_flow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_cavity_flow.zip <plot_cavity_flow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
